
import subprocess
import argparse
from argparse import RawTextHelpFormatter
import requests
import re
import Burpee.burpee as burpee
import json
import statistics


#  parse args
parser = argparse.ArgumentParser(description='python testsqli.py -u url -r request.req -w wordlist',formatter_class=RawTextHelpFormatter)
parser.add_argument('-u', '--url', default='', required=True)
parser.add_argument('-r', '--request', required=True)
parser.add_argument('-w', '--wordlist', default='/opt/SecLists/Fuzzing/SQLi/Generic-SQLi.txt', required=False)
parser.add_argument('-s', '--scan-type', default='all', required=False, help='s - sqli\na - api action\no - api object\nh - headers\ns - swap GET/POST\nall - all')

args = parser.parse_args()
args.url = re.sub('/*$', '', args.url)  # strip trailing / on url
args.scan_type = [x.strip() for x in args.scan_type.split(',')] # parse scan-type args

proxies = {}

# parse burp .req
headers , post_data = burpee.parse_request(args.request)
method_name , resource_name = burpee.get_method_and_resource(args.request)



### loop through and make all iterations of requests 


headers_str = ''
for header in headers:
    headers_str += f'-H "{header}: {headers[header]}" '

print(headers_str)












##### ---------------------------



# output_file = 'tmp.json'

# # STEP 1: RUN FFUF
cmd = f'ffuf -ic -u {args.url} -request {args.request} -w {args.wordlist} -of json -o {output_file}'
print(cmd)

#start and process things, then wait
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
print("Happens while running")
p.communicate() #now wait plus that you can send commands to process
print('done.')



# STEP 2: read data
# FUZZ,url,redirectlocation,position,status_code,content_length,content_words,content_lines,resultfile


with open(output_file) as f:
  data = json.load(f)

    

print('headers:', '\n', headers)
print('method_name:', '\n', method_name)
print('resource_name:', '\n', resource_name)
print('post_data:', '\n', post_data)


# get outliers
mode_code = statistics.mode([x['status'] for x in data['results']])
mode_size = statistics.mode([x['length'] for x in data['results']])


print('\nSize anomolies')
for size in sorted(set([x['length'] for x in data['results'] if x['length'] != mode_size])):
    items = [x for x in data['results'] if x['length'] == size]
    # print('size: {}'.format(size), len(items))
    for x in items:
        print({
        'status': x['status'],
        'size': x['length'], 
        'payload': x['input']['FUZZ']
    })



print('\nStatus anomolies')
for x in [x for x in data['results'] if x['status'] != mode_code]:
    print(x)

